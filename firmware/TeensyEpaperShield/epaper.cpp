#include "epaper.h"
#include "Arduino.h"
#include "font.h"

#define FONT_HEIGHT 13
#define HEIGHT 208
#define WIDTH 112

//------------------------------------------------------------------------------
// File generated by LCD Assistant
// http://en.radzio.dxp.pl/bitmap_converter/
//------------------------------------------------------------------------------

byte _buffer [] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x0F, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x3F, 0xE0, 0x00, 0x00, 0x0F, 0xF8,
0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x01, 0xFF, 0xFC, 0x00, 0x00, 0x7F, 0xFF, 0x00, 0x00,
0x00, 0x30, 0x0C, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0x00, 0x01, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x30,
0x0C, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xC0, 0x07, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x30, 0x0C, 0x00,
0x00, 0x3F, 0xFF, 0xFF, 0xE0, 0x0F, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x7F,
0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x30, 0x0C, 0x00, 0x00, 0xFF, 0xFF, 0xFF,
0xF8, 0x3F, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x30, 0x0C, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFC, 0x7F,
0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x30, 0x0C, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFC, 0x7F, 0xFF, 0xFF,
0xF0, 0x3E, 0x00, 0x30, 0x0C, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xC0, 0x7C,
0x00, 0x30, 0x0C, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0x81, 0xF0, 0x00, 0x30,
0x0C, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x83, 0xC0, 0x00, 0x30, 0x0C, 0x00,
0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0xC0, 0x00, 0x30, 0x0C, 0x00, 0x07, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xC0, 0x40, 0x30, 0x0C, 0x00, 0x0F, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFE, 0x03, 0xC0, 0xC0, 0x30, 0x0C, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFE, 0x03, 0xC3, 0xC0, 0x30, 0x0C, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
0x01, 0xCF, 0xC0, 0x30, 0x0C, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0xFE,
0xC0, 0x30, 0x0C, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFC, 0xC0, 0x30,
0x0C, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0x00, 0x71, 0xC0, 0x30, 0x0C, 0x00,
0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0x00, 0x41, 0xC0, 0x30, 0x0C, 0x00, 0x07, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x83, 0x80, 0x03, 0x80, 0x30, 0x0C, 0x00, 0x07, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFE, 0x01, 0xC0, 0x07, 0x00, 0x30, 0x0C, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xF8, 0x01, 0xE0, 0x0F, 0x00, 0x30, 0x0C, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x03,
0xFC, 0x7E, 0x00, 0x30, 0x0C, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x0F, 0xFF, 0xF8,
0x00, 0x30, 0x0C, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x1F, 0xFF, 0xE0, 0x00, 0x30,
0x0C, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x7F, 0xFF, 0x00, 0x00, 0x30, 0x0C, 0x00,
0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x01, 0xFF, 0xFF, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x01, 0xFF,
0xFF, 0xFF, 0xFF, 0xFC, 0x07, 0xFF, 0xFE, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0xFF, 0xFF, 0xFF,
0xFF, 0xFC, 0x0F, 0xFF, 0xFE, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
0x3F, 0xFF, 0xFC, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF,
0xFC, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00,
0x00, 0x30, 0x0C, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x30,
0x0C, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x30, 0x0C, 0x00,
0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x0F,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x07, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00,
0x00, 0x30, 0x0C, 0x00, 0x07, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x30,
0x0C, 0x00, 0x3F, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00,
0x7F, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0xF0, 0x1F,
0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x01, 0xC0, 0x07, 0x07, 0xFF,
0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x03, 0x80, 0x03, 0x83, 0xFF, 0xFF, 0xFF,
0xFF, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x03, 0x84, 0x01, 0xC7, 0xFF, 0xFF, 0xFF, 0xFE, 0x00,
0x00, 0x00, 0x00, 0x30, 0x0C, 0x07, 0x1E, 0x01, 0xCF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00,
0x00, 0x30, 0x0C, 0x07, 0x3E, 0x00, 0xFE, 0x3F, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x30,
0x0C, 0x06, 0xFF, 0x00, 0xF8, 0x1F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x07,
0xE3, 0x00, 0xE0, 0x0F, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x07, 0xC3, 0x80,
0xC0, 0x07, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x07, 0x01, 0xC0, 0xC0, 0x03,
0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x04, 0x01, 0xC0, 0xC0, 0x01, 0xFF, 0xFF,
0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x01, 0xE1, 0xC0, 0x00, 0xFF, 0xFE, 0x00, 0x00,
0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x07, 0xC1, 0xC0, 0x00, 0x7F, 0xFC, 0x00, 0x00, 0x00, 0x00,
0x00, 0x30, 0x0C, 0x00, 0x0F, 0x03, 0x80, 0x00, 0x3F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
0x0C, 0x00, 0x3E, 0x07, 0x00, 0x00, 0x1F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00,
0xF8, 0x0F, 0x00, 0x00, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x7E, 0xFC,
0x00, 0x00, 0x07, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x3F, 0xF8, 0x00, 0x00,
0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x07, 0xE0, 0x00, 0x00, 0x01, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x30, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0,
0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x1C,
0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00,
0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
0x10, 0x00, 0x00, 0x00, 0x58, 0x3C, 0x3C, 0x5C, 0x00, 0x16, 0x82, 0x1C, 0x41, 0x00, 0x10, 0x5C,
0x1E, 0xFE, 0x70, 0x66, 0x66, 0x66, 0x00, 0x22, 0x82, 0x22, 0x63, 0x00, 0x7C, 0x62, 0x23, 0xDA,
0x70, 0x42, 0x42, 0x42, 0x00, 0x22, 0x92, 0x02, 0x22, 0x00, 0x10, 0x42, 0x41, 0x92, 0x58, 0x7E,
0x7E, 0x42, 0x00, 0x22, 0xAA, 0x3E, 0x22, 0x00, 0x10, 0x40, 0x41, 0x92, 0x48, 0x40, 0x40, 0x42,
0x00, 0x7F, 0xAA, 0x42, 0x14, 0x00, 0x10, 0x40, 0x41, 0x92, 0x44, 0x60, 0x60, 0x44, 0x00, 0x41,
0xAA, 0x46, 0x14, 0x00, 0x10, 0x40, 0x62, 0x92, 0x42, 0x3E, 0x3E, 0x78, 0x00, 0x41, 0xC4, 0x3A,
0x08, 0x00, 0x10, 0x40, 0x3C, 0x92, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC7, 0x00, 0x00, 0x04, 0x00, 0x04,
0x20, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x21, 0x00, 0x00, 0x04, 0x00, 0x04, 0x20, 0x01,
0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x21, 0x00, 0x00, 0x04, 0x00, 0x04, 0x20, 0x01, 0x00, 0x00,
0x00, 0x00, 0x00, 0x04, 0x61, 0x01, 0xC1, 0xE4, 0x60, 0x04, 0x21, 0xE1, 0x03, 0xC3, 0xC0, 0x00,
0x00, 0x07, 0xC1, 0x02, 0x22, 0x04, 0xC0, 0x07, 0xE2, 0x31, 0x06, 0x64, 0x00, 0x00, 0x00, 0x04,
0x61, 0x00, 0x24, 0x05, 0x00, 0x04, 0x24, 0x11, 0x04, 0x24, 0x00, 0x00, 0x00, 0x04, 0x21, 0x03,
0xE4, 0x06, 0x00, 0x04, 0x24, 0x11, 0x07, 0xE3, 0x80, 0x00, 0x00, 0x04, 0x21, 0x04, 0x24, 0x05,
0x80, 0x04, 0x24, 0x11, 0x04, 0x00, 0x40, 0x00, 0x00, 0x04, 0x61, 0x04, 0x66, 0x04, 0xC0, 0x04,
0x26, 0x21, 0x06, 0x00, 0x40, 0x00, 0x00, 0x07, 0xC7, 0xE3, 0xA1, 0xE4, 0x60, 0x04, 0x23, 0xC7,
0xE3, 0xE7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x04, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x01, 0xC5, 0xC1, 0xE0, 0x01, 0xEF, 0xE5, 0xC3, 0xC5, 0xC0, 0x00, 0x00, 0x00, 0x00,
0x02, 0x26, 0x22, 0x20, 0x02, 0x32, 0x06, 0x26, 0x66, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24,
0x24, 0x20, 0x04, 0x12, 0x04, 0x24, 0x24, 0x20, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE4, 0x24, 0x20,
0x04, 0x12, 0x04, 0x27, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x24, 0x24, 0x20, 0x04, 0x12,
0x04, 0x24, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x64, 0x26, 0x60, 0x06, 0x23, 0x04, 0x26,
0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xA4, 0x23, 0xA0, 0x03, 0xC1, 0xE4, 0x23, 0xE4, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
0x3C, 0x1E, 0x42, 0x5C, 0x1E, 0x3C, 0x3C, 0x00, 0x1E, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40, 0x23,
0x42, 0x62, 0x20, 0x66, 0x40, 0x00, 0x23, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x40, 0x41, 0x42, 0x42,
0x40, 0x42, 0x40, 0x00, 0x41, 0x10, 0x00, 0x00, 0x00, 0x00, 0x38, 0x41, 0x42, 0x40, 0x40, 0x7E,
0x38, 0x00, 0x41, 0x10, 0x00, 0x00, 0x00, 0x00, 0x04, 0x41, 0x42, 0x40, 0x40, 0x40, 0x04, 0x00,
0x41, 0x10, 0x00, 0x00, 0x00, 0x00, 0x04, 0x62, 0x46, 0x40, 0x60, 0x60, 0x04, 0x00, 0x62, 0x10,
0x00, 0x00, 0x00, 0x00, 0x78, 0x3C, 0x3A, 0x40, 0x1E, 0x3E, 0x78, 0x00, 0x3C, 0x10, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x30, 0x40, 0x30, 0x70, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
0x00, 0x14, 0x00, 0x00, 0x30, 0x40, 0x30, 0x10, 0x00, 0x20, 0x30, 0x00, 0x00, 0x00, 0x00, 0x14,
0x00, 0x00, 0x00, 0x40, 0x00, 0x10, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x5C, 0x5C,
0x70, 0x5C, 0x70, 0x10, 0x1C, 0xFE, 0x70, 0x1E, 0x5C, 0x00, 0x00, 0x22, 0x62, 0x62, 0x10, 0x62,
0x10, 0x10, 0x22, 0x20, 0x10, 0x23, 0x62, 0x00, 0x00, 0x22, 0x42, 0x42, 0x10, 0x42, 0x10, 0x10,
0x02, 0x20, 0x10, 0x41, 0x42, 0x00, 0x00, 0x22, 0x42, 0x42, 0x10, 0x42, 0x10, 0x10, 0x3E, 0x20,
0x10, 0x41, 0x42, 0x00, 0x00, 0x7F, 0x42, 0x42, 0x10, 0x42, 0x10, 0x10, 0x42, 0x20, 0x10, 0x41,
0x42, 0x00, 0x00, 0x41, 0x42, 0x42, 0x10, 0x42, 0x10, 0x10, 0x46, 0x30, 0x10, 0x62, 0x42, 0x00,
0x00, 0x41, 0x42, 0x42, 0x7E, 0x42, 0x7E, 0x7E, 0x3A, 0x1E, 0x7E, 0x3C, 0x42, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x10, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x0F, 0x1E, 0x78, 0xE1, 0x37, 0xE3, 0xC7, 0x96, 0x00, 0x3C, 0x7B, 0xF8, 0x00, 0x00, 0x10,
0x33, 0x64, 0x21, 0x61, 0x04, 0x2C, 0x19, 0x00, 0x60, 0xCF, 0x68, 0x00, 0x00, 0x1C, 0x21, 0x44,
0x21, 0x81, 0x07, 0xE8, 0x11, 0x00, 0x40, 0x86, 0x48, 0x00, 0x00, 0x03, 0x21, 0x44, 0x21, 0x41,
0x04, 0x08, 0x11, 0x00, 0x40, 0x86, 0x48, 0x00, 0x00, 0x01, 0x33, 0x44, 0x21, 0x21, 0x06, 0x0C,
0x11, 0x18, 0x60, 0xCE, 0x48, 0x00, 0x00, 0x1E, 0x1E, 0x44, 0xF9, 0x11, 0xE3, 0xE7, 0x91, 0x18,
0x3C, 0x7A, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void Epaper::clearScreen() { for ( int i = 0; i < 2912; i++ ) _buffer[ i ] = 0x00; }

void Epaper::initScreen() {
  _d0 = 11;
  _d1 = 13;
  _cs = 17;
  _dc = 16;
  _rs = 14;
  _bs = 15;
  SPI.begin();
  pinMode( _cs, OUTPUT );
  pinMode( _dc, OUTPUT );
  pinMode( _rs, OUTPUT );
  pinMode( _bs, INPUT_PULLUP );
  digitalWrite( _rs, HIGH );        //RES# = 1
  delay( 1 );                       //Delay 1ms
  digitalWrite( _cs, HIGH );        //CS# = 1
  while ( digitalRead( _bs ) == HIGH ) yield(); //Make sure BUSY = LOW
  updateScreen();
}

void Epaper::updateScreen() {
  byte data1[] = { 0xCF, 0x00 };
  _sendIndexData( 0x01, data1, 2 );     //Driver output control setting
  byte data2[] = { 0x00 };
  _sendIndexData( 0x0F, data2, 1 );     //Gate scan start setting
  byte data3[] = { 0x03 };
  _sendIndexData( 0x11, data3, 1 );     //Data entry mode setting
  byte data4[] = { 0x00, 0x0D };
  _sendIndexData( 0x44, data4, 2 );     //Set RAM X - Start-End position
  byte data5[] = { 0x00, 0xCF };
  _sendIndexData( 0x45, data5, 2 );     //Set RAM Y - Start-End position
  byte data6[] = { 0x00 };
  _sendIndexData( 0x4E, data6, 1 );     //Set RAM X address counter
  byte data7[] = { 0x00 };
  _sendIndexData( 0x4F, data7, 1 );     //Set RAM Y address counter
  byte data8[] = { 0x80 };
  _sendIndexData( 0x3C, data8, 1 );     //Select border waveform
  byte data9[] = { 0x10, 0x0A };
  _sendIndexData( 0x03, data9, 2 );    //Set gate driving voltage
  byte data10[] = { 0x00 };
  _sendIndexData( 0x05, data10, 1 );    //Normal analog mode
  byte data11[] = { 0x00, 0x00, 0x00 };
  _sendIndexData( 0x75, data11, 3 );    //Normal analog mode
  //Send Image Data
  _sendIndexData( 0x24, _buffer, 2912 );
  //Update command sequence
  while ( digitalRead( _bs ) == HIGH ) yield(); //Make sure BUSY = LOW
  byte data12[] = { 0x19, 0x00 };
  //byte data13[] = { 0x00, 0x00 };
  _sendIndexData( 0x1A, data12, 2 );    //Send the temperature value
  byte data13[] = { 0xF7 };
  _sendIndexData( 0x22, data13, 1 );    //Set update sequence
  byte data14[] = { 0x00 };
  _sendIndexData( 0x20, data14, 1 );    //Active display update sequence
  while ( digitalRead( _bs ) == HIGH ) yield(); //Make sure BUSY = LOW
}

void Epaper::_sendIndexData( byte index, byte *data, int len ) {
  digitalWrite( _cs, LOW );      //CS Low
  digitalWrite( _dc, LOW );      //DC Low
  SPI.transfer( index );                                     //SPI Send Index
  digitalWrite( _dc, HIGH );      //DC High
  for ( int i = 0; i < len; i++ ) SPI.transfer( data[ i ] ); //SPI Send Data
  digitalWrite( _cs, HIGH );      //CS High
}

void Epaper::drawPixel( int x, int y, int color ) { //drawPixel function cribbed from adafruit gfx library
  if (( x < 0 ) || ( y < 0 ) || ( x >= WIDTH ) || ( y >= HEIGHT )) return;
  int16_t t;
  switch ( _rotation ) {
    case 1:
      t = x;
      x = WIDTH  - 1 - y;
      y = t;
      break;
    case 2:
      x = WIDTH  - 1 - x;
      y = HEIGHT - 1 - y;
      break;
    case 3:
      t = x;
      x = y;
      y = HEIGHT - 1 - t;
      break;
  }
  uint8_t *ptr = &_buffer[( x / 8 ) + y * (( WIDTH + 7 ) / 8 )];
  if ( color ) *ptr |= 0x80 >> ( x & 7 );
  else         *ptr &= ~( 0x80 ) >> ( x & 7 );
}

void Epaper::_placeChar( char c, int neededSpace ) {
  int offset = ( int( c ) - 32 );
  int charWidth = fontDescriptors[ offset ][ 0 ];
  int charOffset = fontDescriptors[ offset ][ 1 ];
  if ( neededSpace < WIDTH ) {
    if (_cursorX > ( WIDTH - neededSpace )) {
      _cursorY += FONT_HEIGHT;
      _cursorX = 0;
    }
  }
  if ( _cursorY > ( HEIGHT - FONT_HEIGHT )) _cursorY = 0;
  for ( int i = 0; i < FONT_HEIGHT; i++ ) {
    int charData;
    if ( charWidth > 8 ) charData = ( fontBitmaps[ charOffset + ( i * 2 ) ] << 8 ) | ( fontBitmaps[ charOffset + ( i * 2 ) + 1 ] ) ;
    else charData = fontBitmaps[ charOffset + i ] << 8;
    for ( int j = 0; j < ( charWidth + 1 ); j++ ) {
      int point = ( charData << j ) & 0x8000;
      drawPixel( _cursorX + j, _cursorY + i, point );
    }
  }
  _cursorX += charWidth + 1;
}

void Epaper::placeStringAt( String s, int x, int y ) {
  _cursorX = x;
  _cursorY = y;
  for ( int i = 0; i < s.length(); i++ ) {
    int neededSpace = 0;
    int offset2 = s.indexOf( ' ', i );
    if ( offset2 == -1 ) offset2 = s.length();
    for ( int j = i; j < offset2; j++ ) {
      int offset = ( int( s.charAt( j ) ) - 32 );
      neededSpace += ( fontDescriptors[ offset ][ 0 ] + 1 );
    }
    _placeChar( s[ i ] , neededSpace );
  }
}
